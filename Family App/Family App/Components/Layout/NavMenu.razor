@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthProvider
@inject UserData userdata
@inject NavigationManager nav
@inject IHttpContextAccessor HttpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudNavMenu>
    <MudNavLink Href="/home" Match="NavLinkMatch.All">Dashboard</MudNavLink>
    <MudNavLink Href="/leaderboard" Match="NavLinkMatch.Prefix">Leaderboard</MudNavLink>
    <MudNavLink Href="/profile" Match="NavLinkMatch.Prefix">Profile</MudNavLink>
        @if (userdata.User != null)
        {
                <MudPaper Class="pa-4 ma-3">
                    <MudStack Spacing="2">
                        @userdata.User.Username
                        <MudButton OnClick="Logout" Variant="Variant.Text" Color="Color.Primary" Class="ml-auto">Sign out</MudButton>
                    </MudStack>
                </MudPaper>
        }
        @if (userdata.User == null)
        {
            <MudPaper Class="pa-4 ma-3">
                <MudButton OnClick="Login" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto">Sign in</MudButton>
            </MudPaper>
        }
</MudNavMenu>

@code {
    string? cookieContent;
    string? username;

    private async Task Login()
    {
        nav.NavigateTo("/login");
    }

    private void Logout()
    {
        userdata.User = null;
        nav.NavigateTo("/", forceLoad: true);
    }

    bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Check local storage for a previous log-on
    }
}