@page "/createaccount"
@inject UserService userservice
@inject VerseService verseservice
@inject NavigationManager nav
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@if (loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
}


<MudStack Class="mt-16 px-8 d-flex flex-wrap align-content-start flex-grow-1" MaxWidth="MaxWidth.False">
    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <MudStack Class="d-flex flex-wrap align-content-start flex-grow-1" MaxWidth="MaxWidth.Large">
            <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Small">
                <MudPaper Class="pa-4">
                    <MudAlert Severity="Severity.Error" Elevation="2" Class="mt-2">
                        Error loading data from the database.<br /><br />
                        @errorMessage
                    </MudAlert>
                </MudPaper>
            </MudContainer>
        </MudStack>
    }
    @if (enteringInfo)
    {
        <h3>Create Account</h3>
        <MudPaper Class="pa-4">
            <MudTextField @bind-Value="firstName" MaxLength="30" Label="First Name" T="string" Immediate="true" Required="true" />
            <MudTextField @bind-Value="lastName" MaxLength="30" Label="Last Name" T="string" Immediate="true" Required="true" />
            <MudTextField @onfocus="GenerateUsername" @bind-Value="username" MaxLength="40" Label="Username" T="string" Immediate="true" Required="true" />
            @if (!string.IsNullOrWhiteSpace(username) && !string.IsNullOrWhiteSpace(firstName) && !string.IsNullOrWhiteSpace(lastName))
            {
                <MudStack Row>
                    <MudTextField @bind-Value="email" MaxLength="30" Label="Optional: Email Address" T="string" Immediate="true" Required="false" />
                    <MudButton OnClick="ClearEmail" Variant="Variant.Text" Class="ml-auto mr-n3 mb-1">Clear</MudButton>
                </MudStack>
                <MudStack Row>
                    <p>Enter an email address to help protect your account</p>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@ToggleHelp">
                        <MudIcon Icon="@Icons.Material.Filled.HelpOutline" Title="More Info" />
                    </MudButton>
                </MudStack>

                <MudPopover Open="@help" Fixed="true" Style="width:250px" Class="px-4 pt-4">
                    <div class="d-flex flex-column">
                        <MudText>Adding an email address can help you recover your account in case you forget your password.</MudText>
                        <MudButton OnClick="ToggleHelp" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                        <MudButton OnClick="PrivacyPolicy" Variant="Variant.Text" Class="ml-auto mr-n3 mb-1">Privacy Policy</MudButton>
                    </div>
                </MudPopover>
            }
            <MudButton OnClick="Next" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Next</MudButton>
        </MudPaper>
    }
    else
    {
        <h3>Create a password:</h3>
        <MudTextField @bind-Value="password" MaxLength="40" T="string" Label="Enter your password"
        InputType="InputType.Password"
        Required="true"
        Immediate="true" />
        <MudTextField T="string"
        Immediate="true"
        @bind-Value="repeatPassword" MaxLength="40" Label="Re-enter your password" InputType="InputType.Password" />
        @if (!string.IsNullOrEmpty(message))
        {
            <MudAlert Severity="Severity.Error" Elevation="2" Class="mt-2">
                @message
            </MudAlert>
        }
        <MudButton OnClick="Register" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
        <MudButton OnClick="Back" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Back</MudButton>

        <p>
            Password is visible only to you.
        </p>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@TogglePasswordHelp">
            <MudIcon Icon="@Icons.Material.Filled.HelpOutline" Title="More Info" />
        </MudButton>

        <MudPopover Open="@passwordHelp" Fixed="true" Class="px-4 pt-4">
            <div class="d-flex flex-column">
                <MudText>Passwords are hashed to protect privacy. Only you can see your password.</MudText>
                <MudButton OnClick="@TogglePasswordHelp" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                <MudButton OnClick="PrivacyPolicy" Variant="Variant.Text" Class="ml-auto mr-n3 mb-1">Privacy Policy</MudButton>
            </div>
        </MudPopover>
    }

    @if (userservice.user != null)
    {
        <h5>Welcome, @userservice.user.Username</h5>
    }
</MudStack>

@code {
    private string? errorMessage;
    private bool loaded = false;
    private string? message;
    private bool loading { get; set; }

    private bool enteringInfo { get; set; } = true;
    private string username { get; set; }
    private string password { get; set; }
    private string repeatPassword { get; set; }
    private string firstName { get; set; }
    private string lastName { get; set; }
    private string email { get; set; }
    private bool help { get; set; } = false;
    private bool passwordHelp { get; set; } = false;
    private int retryCount { get; set; } = 0;
    Random rand = new Random();

    private void ToggleHelp()
    {
        help = !help;
    }

    private void TogglePasswordHelp()
    {
        passwordHelp = !passwordHelp;
    }

    private async Task PrivacyPolicy()
    {
        if (help) help = !help;
        if (passwordHelp) passwordHelp = !passwordHelp;
        await JSRuntime.InvokeAsync<object>("open", "privacypolicy", "_blank");
    }

    private void GenerateUsername()
    {
        if (string.IsNullOrEmpty(username))
            username = firstName + lastName + rand.Next(1000);
    }

    private void ClearEmail()
    {
        email = "";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            loaded = false;
            try
            {
                //await userservice.GetAllUsernamesDBAsync();
                loaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                message = ex.Message;
                loaded = true;
            }
        }
    }

    private void Reload()
    {
        nav.NavigateTo("/createaccount", forceLoad: true);
    }

    private async Task Next()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(username))
                throw new Exception("Please enter a username.");

            loading = true;
            message = "";
            errorMessage = "";

            await userservice.GetAllUsernamesDBAsync();

            foreach (var _username in userservice.usernames)
            {
                if (username.Trim() == _username.Trim())
                {
                    enteringInfo = true;
                    message = "Username already exists.";
                    loading = false;
                    return;
                }
            }

            message = "";
            enteringInfo = false;
            loading = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            if (errorMessage.ToLower().Contains("timed out"))
            {
                errorMessage += "\n (Retry count: " + retryCount + ") Retrying...";
                retryCount++;
                await Next();
            }
        }
    }

    private void Back()
    {
        enteringInfo = true;
    }

    private async Task Register()
    {
        try
        {
            if (String.IsNullOrWhiteSpace(password) || String.IsNullOrWhiteSpace(repeatPassword))
                throw new Exception("Please enter both passwords.");

            if (password != repeatPassword)
                throw new Exception("Passwords do not match.");

            message = "";
            loading = true;
            StateHasChanged();
            userservice.user = new UserModel();
            userservice.user.Username = username.Trim();
            userservice.user.FirstName = firstName.Trim().ToLower();
            userservice.user.LastName = lastName.Trim().ToLower();
            if (email != null)
                userservice.user.Email = email.Trim();
            userservice.user.UserPassword = CreateHash(password.Trim());

            await userservice.AddUserDBAsync(userservice.user);

            loading = false;
            //SetCookies();

            nav.NavigateTo("/", forceLoad: true);
        }
        catch (Exception ex)
        {
            message = ex.Message;
            loading = false;
        }
    }

    // private async Task SetCookies()
    // {
    //     if (userservice.user.Username != null)
    //         await localStorage.SetItemAsync("cookieName", userservice.user.Username.Trim());
    // }

    private string CreateHash(string password)
    {
        byte[] salt = new byte[16];
        new RNGCryptoServiceProvider().GetBytes(salt);

        const int iterations = 100000;
        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, iterations);
        byte[] hash = pbkdf2.GetBytes(20);

        byte[] hashBytes = new byte[36];
        Array.Copy(salt, 0, hashBytes, 0, 16);
        Array.Copy(hash, 0, hashBytes, 16, 20);

        string base64Hash = Convert.ToBase64String(hashBytes);
        return $"{base64Hash}";
    }

    public static bool Verify(string password, string hashedPassword)
    {
        int iterations = 100000;
        string base64Hash = hashedPassword;

        byte[] hashBytes = Convert.FromBase64String(base64Hash);

        byte[] salt = new byte[16];
        Array.Copy(hashBytes, 0, salt, 0, 16);

        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, iterations);
        byte[] hash = pbkdf2.GetBytes(20);

        for (int i = 0; i < 20; i++)
        {
            if (hashBytes[i + 16] != hash[i])
                return false;
        }

        return true;
    }
}