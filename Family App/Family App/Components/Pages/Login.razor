@page "/login"
@inject UserService userservice
@inject VerseService verseservice
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager nav

    @if (loading)
    {
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
    }
<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <MudStack Class="d-flex flex-wrap align-content-start flex-grow-1" MaxWidth="MaxWidth.Large">
            <MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.Small">
                <MudPaper Class="pa-4">
                    <MudAlert Severity="Severity.Error" Elevation="2" Class="mt-2">
                        Error loading data from the database.<br /><br />
                        @errorMessage
                    </MudAlert>
                </MudPaper>
            </MudContainer>
        </MudStack>
    }
    @if (enteringName)
    {
        <h3>Login or Signup</h3>
        <MudPaper Class="pa-4">
            <MudTextField @bind-Value="username" HelperText="Username" T="string" Immediate="true" Required="true" />
            <MudButton OnClick="Next" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Next</MudButton>
        </MudPaper>
    }
    else
    {
        <h3>Enter your password:</h3>
        <MudTextField @bind-Value="password" T="string" HelperText="Enter your password"
        InputType="InputType.Password"
        Required="true"
        Immediate="true"/>
        <MudButton OnClick="Signin" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
        <MudButton OnClick="Back" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Back</MudButton>
    }

    @if (message != null)
    {
        <p>@message</p>
    }

    @if (userservice.user != null)
    {
        <h5>Welcome, @userservice.user.Username</h5>
    }
</MudContainer>

@code {
    private string? errorMessage;
    private bool enteringName = true;
    private bool loading = false;
    private string? username;
    private string? password;
    private string? repeatPassword;
    private string? message;
    private string? cookieMessage;
    UserModel userLoggingIn;
    private int retryCount { get; set; } = 0;

    private void Reload()
    {
        nav.NavigateTo("/login", forceLoad: true);
    }

    private async Task Next()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(username))
                throw new Exception("Please enter a username.");

            loading = true;
            message = "";
            errorMessage = "";

            await userservice.GetAllUsernamesDBAsync();     

            foreach (var _username in userservice.usernames)
            {
                if (username.Trim() == _username.Trim())
                {
                    userLoggingIn = await userservice.GetUserDBAsync(username.Trim());
                    enteringName = false;
                    errorMessage = "";
                    loading = false;
                    return;
                }
            }

            message = "Username does not exist.";
            enteringName = true;
            loading = false;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            if (errorMessage.ToLower().Contains("timed out"))
            {
                errorMessage += "\n (Retry count: " + retryCount + ") Retrying...";
                retryCount++;
                await Next();
            }
        }
    }

    private void Back()
    {
        enteringName = true;
        message = null;
    }

    private async Task Signin()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(password))
                throw new Exception("Please enter your password.");

            if (Verify(password.Trim(), userLoggingIn.UserPassword))
            {
                //SetCookies();
                loading = true;
                StateHasChanged();
                await userservice.GetUserCategoriesDBAsync(userLoggingIn.Id);
                await verseservice.GetUserVersesDBAsync(userLoggingIn.Id);
                await userservice.SetUserActiveDBAsync(userLoggingIn.Id);
                userservice.user = userLoggingIn;
                loading = false;

                nav.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "Password is incorrect.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}