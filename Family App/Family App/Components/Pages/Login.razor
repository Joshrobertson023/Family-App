@page "/login"
@inject UserService userservice
@inject VerseService verseservice
@rendermode InteractiveServer
@inject IHttpContextAccessor HttpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager nav

<MudContainer Class="mt-16 px-8" MaxWidth="MaxWidth.False">

    @if (enteringName)
    {
        <h3>Login or Signup</h3>
        <MudPaper Class="pa-4">
            <MudTextField @bind-Value="username" HelperText="Username" T="string" Immediate="true" Required="true" />
            <MudButton OnClick="Next" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Next</MudButton>
        </MudPaper>
    }
    else
    {
        @if (registering)
        {
            <h3>Create a password:</h3>
        }
        else
        {
            <h3>Enter your password:</h3>
        }
        <MudTextField @bind-Value="password" T="string" HelperText="Enter your password"
        InputType="InputType.Password"
        Required="true"
        Immediate="true"/>
        @if (registering)
        {
            <MudTextField T="string"
            Immediate="true"
            @bind-Value="repeatPassword" HelperText="Re-enter your password" InputType="InputType.Password" />
            <MudButton OnClick="Register" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
        }
        @if (!registering)
        {
            <MudButton OnClick="Signin" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
        }
        <MudButton OnClick="Back" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Back</MudButton>
    }

    @if (!string.IsNullOrWhiteSpace(errorMessage))
    {
        <MudAlert Severity="Severity.Error" Elevation="2" Class="mt-2">
            @errorMessage
        </MudAlert>
    }

    @if (message != null)
    {
        <h4>@message</h4>
    }

    @if (userservice.user != null)
    {
        <h5>Welcome, @userservice.user.Username</h5>
    }
</MudContainer>

@code {
    private string? errorMessage;
    private bool enteringName = true;
    private bool registering = false;
    private string? username;
    private string? password;
    private string? repeatPassword;
    private string? message;
    private string? cookieMessage;

    private async Task Next()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Please enter your username.";
            errorMessage = null;
            return;
        }

        message = "Loading...";

        foreach (var user in userservice.users)
        {
            if (username.Trim() == user.Username.Trim())
            {
                userservice.user = user;
                enteringName = false;
                message = null;
                return;
            }
        }
        registering = true;
        enteringName = false;
        message = null;
    }

    private void Back()
    {
        enteringName = true;
        registering = false;
        message = null;
    }

    private async Task Signin()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(password))
                throw new Exception("Please enter your password.");

            if (Verify(password.Trim(), userservice.user.UserPassword))
            {
                //SetCookies();

                await userservice.GetUserCategoriesDBAsync();
                await verseservice.GetUserVersesDBAsync(userservice.user.Id);
                await userservice.SetUserActiveDBAsync();

                nav.NavigateTo("/home", forceLoad: true);
            }
            else
            {
                errorMessage = "Password is incorrect.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task Register()
    {
        try
        {
            if (String.IsNullOrWhiteSpace(password) || String.IsNullOrWhiteSpace(repeatPassword))
                throw new Exception("Please enter both passwords.");

            if (password != repeatPassword)
                throw new Exception("Passwords do not match.");

            userservice.user = new UserModel();
            userservice.user.Id = await GenerateNextUserId();
            userservice.user.Username = username;
            userservice.user.UserPassword = CreateHash(password.Trim());

            await userservice.AddUserDBAsync(userservice.user);

            //SetCookies();

            nav.NavigateTo("/home", forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    // private async Task SetCookies()
    // {
    //     if (userservice.user.Username != null)
    //         await localStorage.SetItemAsync("cookieName", userservice.user.Username.Trim());
    // }

    private async Task<int> GenerateNextUserId()
    {
        try
        {
            int nextId = await userservice.GetNextUserIdDBAsync();
            return nextId;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        return 0;
    }

    private string CreateHash(string password)
    {
        byte[] salt = new byte[16];
        new RNGCryptoServiceProvider().GetBytes(salt);

        const int iterations = 100000;
        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, iterations);
        byte[] hash = pbkdf2.GetBytes(20);

        byte[] hashBytes = new byte[36];
        Array.Copy(salt, 0, hashBytes, 0, 16);
        Array.Copy(hash, 0, hashBytes, 16, 20);

        string base64Hash = Convert.ToBase64String(hashBytes);
        return $"{base64Hash}";
    }


    public static bool Verify(string password, string hashedPassword)
    {
        int iterations = 100000;
        string base64Hash = hashedPassword;

        byte[] hashBytes = Convert.FromBase64String(base64Hash);

        byte[] salt = new byte[16];
        Array.Copy(hashBytes, 0, salt, 0, 16);

        var pbkdf2 = new Rfc2898DeriveBytes(password, salt, iterations);
        byte[] hash = pbkdf2.GetBytes(20);

        for (int i = 0; i < 20; i++)
        {
            if (hashBytes[i + 16] != hash[i])
                return false;
        }

        return true;
    }
}